//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Avanza.DataAccess
{
    using System;
    using System.Collections.Generic;
    using Avanza.Util;
    using NLog;
    
    public partial class SEC_USER: IVisionLogger
    {
        public SEC_USER()
        {
            this.SEC_USER_GROUP = new HashSet<SEC_USER_GROUP>();
        }
    
        public string LOGIN_ID { get; set; }
        public string PASSWORD { get; set; }
        public string FULL_NAME { get; set; }
        public string OTHER_LANG_NAME { get; set; }
        public string PREFERED_CULTURE { get; set; }
        public decimal IS_ACTIVE { get; set; }
        public Nullable<System.DateTime> WHEN_DELETED { get; set; }
        public string POLICY_ID { get; set; }
        public Nullable<decimal> DEPT_ID { get; set; }
        public string OFFICE_ID { get; set; }
        public string ORG_ID { get; set; }
        public System.DateTime CREATED_ON { get; set; }
        public string CREATED_BY { get; set; }
        public System.DateTime UPDATED_ON { get; set; }
        public string UPDATED_BY { get; set; }
        public decimal IS_LOGGED_IN { get; set; }
        public string WINDOWS_LOGGEDIN_BY { get; set; }
        public Nullable<System.DateTime> LAST_RESPONSE_AT { get; set; }
        public Nullable<decimal> IS_RESET_REQUIRED { get; set; }
        public Nullable<decimal> PWD_RETRY_COUNT { get; set; }
        public Nullable<int> SUPPORT_LEVEL_ID { get; set; }
        public string EMAIL_ADDRESS { get; set; }
    
        public virtual ICollection<SEC_USER_GROUP> SEC_USER_GROUP { get; set; }
    
    	public LogEventInfo GetLogEvent(LogLevel level, string loggerName, string message,
                string Entity,
                string Action,
                string PrimaryKeyVals,
                string ChangedColVals,
                string CreatedBy,
                DateTime CreatedOn,
                string UpdateBy,
                DateTime UpdatedOn,
                string MachineName,
                string LogTypeID,
                int Result,
                string EventOrigin,
                string Description)
            {
                var logEvent = new LogEventInfo(level, loggerName, message);
    
                logEvent.Properties["ENTITY"] = Entity;
                logEvent.Properties["ACTION"] = Action;
                logEvent.Properties["PRIMARY_KEY_VALS"] = PrimaryKeyVals;
                logEvent.Properties["CHANGED_COLS_VAL"] = ChangedColVals;
                logEvent.Properties["CREATED_ON"] = CreatedOn;
                logEvent.Properties["CREATED_BY"] = CreatedBy;
                logEvent.Properties["UPDATED_ON"] = UpdatedOn;
                logEvent.Properties["UPDATED_BY"] = UpdateBy;
                logEvent.Properties["WINDOWS_CREATED_BY"] = "";
                logEvent.Properties["WINDOWS_UPDATED_BY"] = "";
                logEvent.Properties["MACHINE_NAME"] = MachineName;
                logEvent.Properties["LOG_TYPE_ID"] = LogTypeID;
                logEvent.Properties["RESULT"] = Result;
                logEvent.Properties["EVENT_ORIGIN"] = EventOrigin;
                logEvent.Properties["DESCRIPTION"] = Description;
                
                return logEvent;
            }
    }
    
}
